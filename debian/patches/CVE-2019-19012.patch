Origin: https://github.com/kkos/oniguruma/commit/0463e21432515631a9bc925ce5eb95b097c73719
Origin: https://github.com/kkos/oniguruma/commit/db64ef3189f54917a5008a02bdb000adc514a90a
Origin: https://github.com/kkos/oniguruma/commit/bfc36d3d8139b8be4d3df630d625c58687b0c7d4
Origin: https://github.com/kkos/oniguruma/commit/778a43dd56925ed58bbe26e3a7bb8202d72c3f3f
Origin: https://github.com/kkos/oniguruma/commit/b6cb7580a7e0c56fc325fe9370b9d34044910aed
Author: K.Kosako <kosako@sofnec.co.jp>
Reviewed-by: Sylvain Beucler <beuc@debian.org>
Last-Update: 2019-11-25

fix #164: Integer overflow related to reg->dmax in search_in_range()

Index: libonig-5.9.5/regexec.c
===================================================================
--- libonig-5.9.5.orig/regexec.c
+++ libonig-5.9.5/regexec.c
@@ -3117,14 +3118,14 @@ forward_search_range(regex_t* reg, const
 #endif
 
   p = s;
-  if (reg->dmin > 0) {
+  if (reg->dmin != 0) {
+    if (end - p <= reg->dmin)
+      return 0; /* fail */
     if (ONIGENC_IS_SINGLEBYTE(reg->enc)) {
       p += reg->dmin;
     }
     else {
       UChar *q = p + reg->dmin;
-
-      if (q >= end) return 0; /* fail */
       while (p < q) p += enclen(reg->enc, p);
     }
   }
@@ -3153,7 +3154,7 @@ forward_search_range(regex_t* reg, const
   }
 
   if (p && p < range) {
-    if (p - reg->dmin < s) {
+    if (p - s < reg->dmin) {
     retry_gate:
       pprev = p;
       p += enclen(reg->enc, p);
@@ -3201,6 +3202,7 @@ forward_search_range(regex_t* reg, const
 	  *low_prev = onigenc_get_prev_char_head(reg->enc,
 						 (pprev ? pprev : str), p);
       }
+      *high = p;
     }
     else {
       if (reg->dmax != ONIG_INFINITE_DISTANCE) {
@@ -3225,9 +3227,12 @@ forward_search_range(regex_t* reg, const
           }
 	}
       }
+      /* no needs to adjust *high, *high is used as range check only */
+      if (p - str < reg->dmin)
+        *high = (UChar* )str;
+      else
+        *high = p - reg->dmin;
     }
-    /* no needs to adjust *high, *high is used as range check only */
-    *high = p - reg->dmin;
 
 #ifdef ONIG_DEBUG_SEARCH
     fprintf(stderr,
@@ -3253,7 +3258,6 @@ backward_search_range(regex_t* reg, cons
   int r;
   UChar *p;
 
-  range += reg->dmin;
   p = s;
 
  retry:
@@ -3328,10 +3332,22 @@ backward_search_range(regex_t* reg, cons
       }
     }
 
-    /* no needs to adjust *high, *high is used as range check only */
     if (reg->dmax != ONIG_INFINITE_DISTANCE) {
-      *low  = p - reg->dmax;
-      *high = p - reg->dmin;
+      if (p - str < reg->dmax)
+        *low = (UChar* )str;
+      else
+        *low = p - reg->dmax;
+
+      if (reg->dmin != 0) {
+        if (p - str < reg->dmin)
+          *high = (UChar* )str;
+        else
+          *high = p - reg->dmin;
+      }
+      else {
+        *high = p;
+      }
+
       *high = onigenc_get_right_adjust_char_head(reg->enc, adjrange, *high);
     }
 
@@ -3487,7 +3503,7 @@ onig_search(regex_t* reg, const UChar* s
 	goto mismatch_no_msa;
 
       if (range > start) {
-	if ((OnigDistance )(min_semi_end - start) > reg->anchor_dmax) {
+	if (min_semi_end - start > reg->anchor_dmax) {
 	  start = min_semi_end - reg->anchor_dmax;
 	  if (start < end)
 	    start = onigenc_get_right_adjust_char_head(reg->enc, str, start);
@@ -3495,19 +3511,26 @@ onig_search(regex_t* reg, const UChar* s
 	    start = onigenc_get_prev_char_head(reg->enc, str, end);
 	  }
 	}
-	if ((OnigDistance )(max_semi_end - (range - 1)) < reg->anchor_dmin) {
-	  range = max_semi_end - reg->anchor_dmin + 1;
+	if (max_semi_end - (range - 1) < reg->anchor_dmin) {
+          if (max_semi_end - str + 1 < reg->anchor_dmin)
+            goto mismatch_no_msa;
+          else
+            range = max_semi_end - reg->anchor_dmin + 1;
 	}
 
 	if (start >= range) goto mismatch_no_msa;
       }
       else {
-	if ((OnigDistance )(min_semi_end - range) > reg->anchor_dmax) {
+	if (min_semi_end - range > reg->anchor_dmax) {
 	  range = min_semi_end - reg->anchor_dmax;
 	}
-	if ((OnigDistance )(max_semi_end - start) < reg->anchor_dmin) {
-	  start = max_semi_end - reg->anchor_dmin;
-	  start = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc, str, start);
+	if (max_semi_end - start < reg->anchor_dmin) {
+          if (max_semi_end - str < reg->anchor_dmin)
+            goto mismatch_no_msa;
+          else {
+            start = max_semi_end - reg->anchor_dmin;
+            start = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc, str, start);
+          }
 	}
 	if (range > start) goto mismatch_no_msa;
       }
@@ -3585,15 +3608,19 @@ onig_search(regex_t* reg, const UChar* s
     if (reg->optimize != ONIG_OPTIMIZE_NONE) {
       UChar *sch_range, *low, *high, *low_prev;
 
-      sch_range = (UChar* )range;
       if (reg->dmax != 0) {
 	if (reg->dmax == ONIG_INFINITE_DISTANCE)
 	  sch_range = (UChar* )end;
 	else {
-	  sch_range += reg->dmax;
-	  if (sch_range > end) sch_range = (UChar* )end;
+          if ((end - range) < reg->dmax)
+            sch_range = (UChar* )end;
+          else {
+            sch_range = (UChar* )range + reg->dmax;
+          }
 	}
       }
+      else
+        sch_range = (UChar* )range;
 
       if ((end - start) < reg->threshold_len)
         goto mismatch;
@@ -3652,18 +3679,28 @@ onig_search(regex_t* reg, const UChar* s
 
     if (reg->optimize != ONIG_OPTIMIZE_NONE) {
       UChar *low, *high, *adjrange, *sch_start;
+      const UChar *min_range;
 
       if (range < end)
 	adjrange = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc, str, range);
       else
 	adjrange = (UChar* )end;
 
+      if (end - range > reg->dmin)
+        min_range = range + reg->dmin;
+      else
+        min_range = end;
+
       if (reg->dmax != ONIG_INFINITE_DISTANCE &&
 	  (end - range) >= reg->threshold_len) {
 	do {
-	  sch_start = s + reg->dmax;
-	  if (sch_start > end) sch_start = (UChar* )end;
-	  if (backward_search_range(reg, str, end, sch_start, range, adjrange,
+          if (end - s > reg->dmax)
+            sch_start = s + reg->dmax;
+          else {
+            sch_start = (UChar* )end;
+          }
+
+	  if (backward_search_range(reg, str, end, sch_start, min_range, adjrange,
 				    &low, &high) <= 0)
 	    goto mismatch;
 
@@ -3681,19 +3718,7 @@ onig_search(regex_t* reg, const UChar* s
       else { /* check only. */
 	if ((end - range) < reg->threshold_len) goto mismatch;
 
-	sch_start = s;
-	if (reg->dmax != 0) {
-	  if (reg->dmax == ONIG_INFINITE_DISTANCE)
-	    sch_start = (UChar* )end;
-	  else {
-	    sch_start += reg->dmax;
-	    if (sch_start > end) sch_start = (UChar* )end;
-	    else
-	      sch_start = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc,
-						    start, sch_start);
-	  }
-	}
-	if (backward_search_range(reg, str, end, sch_start, range, adjrange,
+	if (backward_search_range(reg, str, end, sch_start, min_range, adjrange,
 				  &low, &high) <= 0) goto mismatch;
       }
     }
